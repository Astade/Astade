<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <meta http-equiv="Content-Language" content="en-us">
 <meta name="GENERATOR" content="Microsoft FrontPage 4.0">
 <meta name="ProgId" content="FrontPage.Editor.Document">
 <title>Why reinvent the wheel?</title>
</head>

<body>

<p><!--webbot bot="Navigation" S-Type="siblings" S-Orientation="horizontal"
S-Rendering="graphics" B-Include-Home="FALSE" B-Include-Up="FALSE" U-Page S-Target startspan
--><nobr>[&nbsp;<a href="framework.htm">framework</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="softwarearchitecture.htm">architecture</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="screenshots.htm">screenshots</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="contribution.htm">contribution</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="resources.htm">resources</a>&nbsp;]</nobr> <nobr>[&nbsp;new&nbsp;Wheel&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="58475"
-->
</p>

<p>Lets try to explain, why there has to be a new tool. Start at begin. Why an
UML tool at all?</p>
<h3>Why using an UML Tool?</h3>
<p>First of all we must assume, that there is something (lets call it an idea)
which shall be realized! Assume further, that we already decided to do it in
C++. So we have the &quot;idea&quot; on the one hand, and itsRealization on the
other hand. Lets draw it that way:</p>
<p><img border="0" src="images/Wheel1.png"></p>
<p>How do you do the realization? Normally you use some coding editor for it. If
we call the coding editor the &quot;InputDialog&quot; for the Realization we
might come to this picture:</p>
<p><img border="0" src="images/Wheel2.png"></p>
<p>One Idea can have more than one Realization and even one Realization can have
more than one InputDialog, but leave that aside, for now. Some people prefer to
get some Documentation for the Idea (they say: &quot;for the Realization&quot;
but the mean &quot;for the Idea&quot; otherwise bugs could be only in the
Documentation)</p>
<p>To do the Documentation you could use various tools. lets assume you use a
&quot;DrawingProgram&quot; to draw nice UML diagrams for the documentation. Than
we end up with this picture:</p>
<p><img border="0" src="images/Wheel3.png"></p>
<p>In practice this ends up with documentation which has nothing to do (after a
while) with the realization, because both are done total different ways and if
one changes at the one end, the other end will not change too.</p>
<p>Now we come to the theory: Inside the UML tool is a very clever coder, with
praxis proven design patterns, that is able to do the coding automatically for
you, right off the documentation (the UML graphs):</p>
<p><img border="0" src="images/Wheel4.png"></p>
<h2>Why is Astade different?</h2>
<p>Now the realization and the documentation have the same source (the drawing)
and stay always consistent. The problem is solved. That is, what the sales
people of UML tools tell you.</p>
<p>Do you believe that? No? - you're right! In practice that doesn't work. There
are hundreds of examples, let me give you just one: You want to use something
from a library, lets say a &quot;String&quot;. How you do that? If you draw it,
the coder will code it, that's not what you want.</p>
<p>If you don't draw it, your code doesn't know it, you can not use it, its nether
what you want (and its not in the documentation!). But the tool manufacturer are
not so stupid. They define some &quot;ExtraInputDialog&quot; for you, where you
can put these extra stuff and all the exceptions. We end up here:</p>
<p><img border="0" src="images/Wheel5.png"></p>
<p>You see, how simple it is now? Instead of making the code with a code editor
on the one hand and the documentation with a drawing tool on the other hand and
get them always be inconsistent -</p>
<p>You make the code from a mixture from drawings and extra dialogs on the one
hand and the documentation only with the drawing tool and get them inconsistent,
too.</p>
<p>In addition to that, you might ask, whether a drawing tool is the ideal input
dialog for creating code. From practice I can tell you, it is <u>possible</u>
not <u>ideal</u>.</p>
<p>Now we come to the point, where Astade tries to be better. Astade develops a
common &quot;ExtraInputDialog&quot; which is suitable for both, coding and
documentation. lets call it &quot;CommonInputDialog&quot;. For that reason it
has no drawing tool inside. you end up here:</p>
<p><img border="0" src="images/Wheel6.png"></p>
<p>The dialog is much more comfortable for coding than a drawing tool, believe
me. Even for drawing its not so bad, the pictures on this site are done with
Astade! And you really have a chance to achieve what UML tools want to: a
documentation which is always consistent with the realization.</p>
<p><!--webbot bot="Navigation" S-Type="parent" S-Orientation="horizontal"
S-Rendering="graphics" B-Include-Home="FALSE" B-Include-Up="FALSE" U-Page S-Target startspan
--><nobr>[&nbsp;<a href="index.html">Project&nbsp;overview</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="12898"
--></p>

</body>

</html>

[Astade]
Name=wxThread
Type=2097408
ID=$Id$
LastChanged=1175935190
GUID=GNKSEDTE
LibClass=1
Description=A thread is basically a path of execution through a program. Threads are sometimes called light-weight processes, but the fundamental difference between threads and processes is that memory spaces of different processes are separated while all threads share the same address space. While it makes it much easier to share common data between several threads, it also makes it much easier to shoot oneself in the foot, so careful use of synchronization objects such as mutexes and/or critical sections is recommended.\n\nThere are two types of threads in wxWidgets: detached and joinable ones, just as in the POSIX thread API (but unlike Win32 threads where all threads are joinable). The difference between the two is that only joinable threads can return a return code -- this is returned by the Wait() function. Detached threads (the default type) cannot be waited for.\n\nYou shouldn't hurry to create all the threads joinable, however, because this has a disadvantage as well: you must Wait() for a joinable thread or the system resources used by it will never be freed, and you also must delete the corresponding wxThread object yourself. In contrast, detached threads are of the "fire-and-forget" kind: you only have to start a detached thread and it will terminate and destroy itself.\n\nThis means, of course, that all detached threads must be created on the heap because the thread will call delete this; upon termination. Joinable threads may be created on the stack although more usually they will be created on the heap as well. Don't create global thread objects because they allocate memory in their constructor, which will cause problems for the memory checking system. Finally, another consequence of the handling of the above is that you should never delete a detached thread yourself, as this will be done by the thread itself when it terminates.
ClassInclude=<wx/thread.h>
FullName=wxThread

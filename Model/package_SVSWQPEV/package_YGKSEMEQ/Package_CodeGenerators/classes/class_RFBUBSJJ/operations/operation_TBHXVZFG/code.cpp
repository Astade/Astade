/* vi: set tabstop=4: */

target.SetExt("cpp");
std::ofstream out(target.GetFullPath().c_str());
out << "//******************************************************" << std::endl;
out << "//** Code generated by the Astade CppGenerator"           << std::endl;
out << "//** Date:     " << GenerationTime                        << std::endl;
out << "//** Filename: " << target.GetFullName().c_str()          << std::endl;
out << "//******************************************************" << std::endl;
out << std::endl;

wxFileName PrefixName(source->GetFileName());
PrefixName.SetFullName("prolog.cpp");
wxTextFile prefixtext(PrefixName.GetFullPath());

if (prefixtext.Exists())
	prefixtext.Open();

if (prefixtext.IsOpened())
{
	wxString str;
	out << "//****** implementation prolog ******" << std::endl;
	out << "//[" << PrefixName.GetFullPath().c_str() << "]" << std::endl;
	for (str = prefixtext.GetFirstLine(); !prefixtext.Eof(); str = prefixtext.GetNextLine())
	{
		out << str.c_str() << std::endl;
	}
	if (str.size())
		out << str.c_str() << std::endl;
	out << "//***********************************" << std::endl;
	out << std::endl;
}

target.SetExt("h");
out << "#include \"" << target.GetFullName().c_str();
out << "\"\t // own header" << std::endl;
out << std::endl;

RelationIncludes(out, false, NULL);
staticAttribute(out, false, ITEM_IS_PUBLIC);
staticAttribute(out, false, ITEM_IS_PROTECTED);
staticAttribute(out, false, ITEM_IS_PRIVATE);
operations(out, false, ITEM_IS_PUBLIC);
operations(out, false, ITEM_IS_PROTECTED);
operations(out, false, ITEM_IS_PRIVATE);

wxFileName PostfixName(source->GetFileName());
PostfixName.SetFullName("epilog.cpp");
wxTextFile postfixtext(PostfixName.GetFullPath());

if (postfixtext.Exists())
	postfixtext.Open();

if (postfixtext.IsOpened() )
{
	out << "//****** implementation epilog ******" << std::endl;
	out << "//[" << PostfixName.GetFullPath().c_str() << "]" << std::endl;
	wxString str;
	for (str = postfixtext.GetFirstLine(); !postfixtext.Eof(); str = postfixtext.GetNextLine())
	{
		out << str.c_str() << std::endl;
	}
	if (str.size())
		out << str.c_str() << std::endl;
	out << "//***********************************" << std::endl;
	out << std::endl;
}

/* vi: set tabstop=4: */

target.SetExt("h");
std::ofstream out(target.GetFullPath().c_str());
out << "//******************************************************" << std::endl;
out << "//** Code generated by the Astade CppGenerator"           << std::endl;
out << "//** Date:     " << GenerationTime                        << std::endl;
out << "//** Filename: " << target.GetFullName().c_str()          << std::endl;
out << "//******************************************************" << std::endl;
out << std::endl;
 
wxString defname(target.GetFullName());
defname.MakeUpper();
defname.Replace(".","_");

out << "#ifndef __"   << defname.c_str() << std::endl;
out << "  #define __" << defname.c_str() << std::endl;
out << std::endl;

wxFileName PrefixName(source->GetFileName());
PrefixName.SetFullName("prolog.h");
wxTextFile prefixtext(PrefixName.GetFullPath());

if (prefixtext.Exists())
	prefixtext.Open();

if (prefixtext.IsOpened())
{
	out << "//****** specification prolog ******" << std::endl;
	out << "//[" << PrefixName.GetFullPath().c_str() << "]" << std::endl;
	wxString str;
	for (str = prefixtext.GetFirstLine(); !prefixtext.Eof(); str = prefixtext.GetNextLine())
	{
		out << str.c_str() << std::endl;
	}
	if (str.size())
		out << str.c_str() << std::endl;
	out << "//**********************************" << std::endl;
	out << std::endl;
}

wxString BaseClasses;
RelationIncludes(out, true, &BaseClasses);

if (!source->GetAdditionalBaseClasses().empty())
{
	if (!BaseClasses.empty())
		BaseClasses = source->GetAdditionalBaseClasses() + ", " + BaseClasses;
	else
		BaseClasses = source->GetAdditionalBaseClasses();
}
out << "class " << source->GetName().c_str();
if (!BaseClasses.empty())
	out << " : " << BaseClasses.c_str();
out << std::endl;
out << "{" << std::endl;

out << "\tpublic:" << std::endl;
staticAttribute(out, true, ITEM_IS_PUBLIC);
memberType(out);
memberAttribute(out, true, ITEM_IS_PUBLIC);
operations(out, true, ITEM_IS_PUBLIC);

out << std::endl;
out << "\tprotected:" << std::endl;
staticAttribute(out, true, ITEM_IS_PROTECTED);
memberAttribute(out, true, ITEM_IS_PROTECTED);

std::map<wxString,wxString>::iterator it;

for (it = RelationTypes.begin(); it != RelationTypes.end(); ++it)
{
	out << "\t" << (*it).second.c_str()
		<< "\t" << (*it).first.c_str() << ";" << std::endl;
}
operations(out, true, ITEM_IS_PROTECTED);

out << std::endl;
out << "\tprivate:" << std::endl;
staticAttribute(out, true, ITEM_IS_PRIVATE);
memberAttribute(out, true, ITEM_IS_PRIVATE);
operations(out, true, ITEM_IS_PRIVATE);

out << "};" << std::endl;
out << std::endl;

wxFileName PostfixName(source->GetFileName());
PostfixName.SetFullName("epilog.h");
wxTextFile postfixtext(PostfixName.GetFullPath());

if (postfixtext.Exists())
	postfixtext.Open();

if (postfixtext.IsOpened())
{
	out << "//****** specification epilog ******" << std::endl;
	out << "//[" << PostfixName.GetFullPath().c_str() << "]" << std::endl;
	wxString str;
	for (str = postfixtext.GetFirstLine(); !postfixtext.Eof(); str = postfixtext.GetNextLine())
	{
		out << str.c_str() << std::endl;
	}
	if (str.size())
		out << str.c_str() << std::endl;
	out << "//**********************************" << std::endl;
	out << std::endl;
}

out << "#endif" << std::endl;

//******************************************************
//** Code generated by the Astade CppGenerator
//** Date:     2006-03-03 12:29:16 UTC
//** Filename: SeqGraphTab.cpp
//******************************************************

//****** implementation prolog ******
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/prolog.cpp]
#include "SeqGraphTab.h"

BEGIN_EVENT_TABLE(SeqGraphTab, wxScrolledWindow)
  EVT_PAINT(SeqGraphTab::OnPaint)
  EVT_RIGHT_DOWN(SeqGraphTab::OnRightDown)
  EVT_MOTION(SeqGraphTab::OnMouseMove)
  EVT_LEAVE_WINDOW(SeqGraphTab::LeaveWindow)
  EVT_MENU(ID_MNU_DELETE, SeqGraphTab::DeleteEvent)
END_EVENT_TABLE()
//[EOF]
//***********************************

#include "SeqGraphTab.h"	 // own header


SeqGraphTab::SeqGraphTab(wxWindow* parent,SeqDataBase* theDataBase) :
	wxScrolledWindow(parent,-1), dataBase(theDataBase),
	mouseOverClass(0),
	mouseOverEvent(0)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/constructor_MPEKJRJL/code.cpp]
	theStatusBar = NULL;
	SetScrollbars(20, 20, 50, 50);
//[EOF]
};

void SeqGraphTab::DrawOnDC(wxDC& dc)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_FWJYVFWK/code.cpp]
	dc.SetFont(wxFont(8, wxFONTFAMILY_SWISS , wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL ));
	
	int eventsCount = dataBase->GetEventsCount();
	
	int i;
	
	eventQueue.clear();
	eventQueue.reserve(dataBase->GetClassCount());
	
	thickness.reserve(dataBase->GetClassCount());
	for (i=0; i < dataBase->GetClassCount(); i++)
	{
		thickness[i] = -1;
		std::list<int> e;
		eventQueue.push_back(e);
	}
	
	// Calculate class box sizes
	for (i = 0; i < dataBase->GetClassCount(); i++)
	{
		wxString name = dataBase->GetClassName(i);
		wxCoord w,h;
		dc.GetTextExtent(name, &w, &h);
		int width = w+10;
		if (width < 80)
			width = 80;
		dataBase->SetClassBoxWidth(i,width);
	}
	
	// Now all the events
	for (i = 0; i < eventsCount; i++)
		DrawEvent(dc,i);
	
	for (i=0; i < dataBase->GetClassCount(); i++)
		while (!eventQueue[i].empty())
		{
			DrawLostEvent(dc,eventQueue[i].front());
			eventQueue[i].pop_front();
		}
//[EOF]
};

void SeqGraphTab::OnPaint(wxPaintEvent& event)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_BJZEQGPS/code.cpp]
	SetVirtualSize(dataBase->GetGraphWidth(), dataBase->GetGraphHight());
	
	wxPaintDC dc( this );
	PrepareDC( dc );
	
	DrawOnDC(dc);
//[EOF]
};

void SeqGraphTab::DrawArrow(wxDC& dc,int startX,int startY,int stopX,int stopY,int arrowHead,const wxString& label)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_DLUFEFFL/code.cpp]
	if (startX==stopX)
		return;
	
	dc.DrawLine(startX,	startY, stopX, stopY);
	
	if (startY==stopY)
	{
		int x1;
	
		if (startX < stopX)
			x1 = 13;
		else
			x1 = -13;
	
		int y1 = 4;
		int y2 = -4;
	
		switch (arrowHead)
		{
			case ARROWHEADVEE:
				dc.DrawLine(stopX-x1, stopY-y2, stopX, stopY);
				dc.DrawLine(stopX-x1, stopY-y1, stopX, stopY);
			break;
	
			case ARROWHEADSOLID:
			{
				wxPoint p[3] = {wxPoint(stopX, stopY),wxPoint(stopX-x1, stopY-y2),wxPoint(stopX-x1, stopY-y1)};
				dc.DrawPolygon(3,p);
			}
			break;
		}
	
		wxCoord w,h;
		dc.GetTextExtent(label, &w, &h);
		w = w/2;
	
		dc.DrawText(label,startX+((stopX-startX)/2)-w,startY+((stopY-startY)/2)-h);
	}
	else
	{
		double angle = atan2((stopY-startY),(stopX-startX));
	
		// arrowHead
		double ad = 0.31;
	
		double a1 = angle + ad;
	
		int x1 = static_cast<int>(14 * cos(a1));
		int y1 = static_cast<int>(14 * sin(a1));
	
		double a2 = angle - ad;
	
		int x2 = static_cast<int>(14 * cos(a2));
		int y2 = static_cast<int>(14 * sin(a2));
	
		switch (arrowHead)
		{
			case ARROWHEADVEE:
				dc.DrawLine(stopX-x2, stopY-y2, stopX, stopY);
				dc.DrawLine(stopX-x1, stopY-y1, stopX, stopY);
			break;
	
			case ARROWHEADSOLID:
			{
				wxPoint p[3] = {wxPoint(stopX, stopY),wxPoint(stopX-x2, stopY-y2),wxPoint(stopX-x1, stopY-y1)};
				dc.DrawPolygon(3,p);
			}
			break;
		}
	
		// calculating textposition
	
		wxCoord w,h;
		dc.GetTextExtent(label, &w, &h);
		if (startX<stopX)
			w=-3;
	
		dc.DrawText(label,startX-w,startY-h+2);
	}
//[EOF]
};

int SeqGraphTab::GetRightSide(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_FAKENCBL/code.cpp]
	int t = thickness[classIndex];
	if (t>4)
		t=4;
	
	if (t<=0)
		t=0;
	
	int table[8] = {0,5,10,15,20,25,30,35};
	return dataBase->GetClassMiddle(classIndex)+table[t];
//[EOF]
};

void SeqGraphTab::DrawLifeLine(wxDC& dc,int classIndex,int timeIndex,int theThickness)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_HHNMCVKU/code.cpp]
	if (theThickness < 0)
		return;
	
	int startY = dataBase->GetTime2Y(timeIndex);
	int length = startY-dataBase->GetTime2Y(timeIndex-1);
	
	if (length <= 0)
		return;
	
	if (theThickness > 4)
		theThickness=4;
	
	int middle = dataBase->GetClassMiddle(classIndex);
	
	if (theThickness==0)
	{
		int i;
		for (i=startY-length; i <= startY; i++)
		{
			if (i % 20 < 10)
				dc.DrawPoint(middle, i);
		}
	}
	else
	if (theThickness>=1)
	{
		for (int i=0; i<(theThickness*5); i+=5)
		{
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("WHITE"),1,wxSOLID));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("WHITE"),wxSOLID));
			dc.DrawRectangle(middle-5+i, startY-length, 10, length);
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("SEA GREEN"),1,wxSOLID));
			dc.DrawLine(middle-5+i, startY, middle-5+i, startY-length-1);
			dc.DrawLine(middle+5+i, startY, middle+5+i, startY-length-1);
		}
	}
//[EOF]
};

void SeqGraphTab::OnMouseMove(wxMouseEvent& event)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_JKZRTLEQ/code.cpp]
	if (dataBase->GetClassCount()==0)
		return;
	
	wxClientDC dc(this);
	DoPrepareDC(dc);
	
	wxPoint p = event.GetLogicalPosition(dc);
	mouseOverClass = dataBase->GetObjectIDFromX(p.x);
	mouseOverEvent = dataBase->GetTimeFromY(p.y);
	
	if ((mouseOverEvent >= 0) && (mouseOverEvent < dataBase->GetEventsCount()))
	{
		wxString pos;
		pos.Printf("Event: %d",mouseOverEvent);
	
		theStatusBar->PushStatusText(pos,0);
		theStatusBar->PushStatusText(dataBase->GetEventTimestamp(mouseOverEvent),1);
	}
	else
	{
		theStatusBar->PushStatusText(wxEmptyString,0);
		theStatusBar->PushStatusText(wxEmptyString,1);
	}
//[EOF]
};

void SeqGraphTab::DrawLostEvent(wxDC& dc,int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_KGYPNSSO/code.cpp]
	int start = dataBase->GetSourceIndex(eventNumber);
	int stop = dataBase->GetDestinationIndex(eventNumber);
	int startPixel;
	int stopPixel;
	int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
	startPixel = dataBase->GetClassMiddle(start);
	stopPixel = dataBase->GetClassMiddle(stop);
	
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("RED"),1,wxSOLID ));
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("RED"),wxSOLID));
	dc.DrawCircle(stopPixel, yPixel, 6);
	
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
	DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADVEE, "");
//[EOF]
};

void SeqGraphTab::DrawEndExecution(wxDC& dc,int classIndex,int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_KXGVPWAP/code.cpp]
	int theThickness = thickness[classIndex];
	
	if (theThickness < 0)
		return;
	
	if (theThickness > 3)
		return;
	
	int right = GetRightSide(classIndex);
	int startY = dataBase->GetTime2Y(eventNumber);
	int length = startY-dataBase->GetTime2Y(eventNumber-1);
	
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("WHITE"),wxSOLID));
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("SEA GREEN"),1,wxSOLID));
	dc.DrawRectangle(right-5, startY-length, 11, length-4);
	
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("WHITE"),1,wxSOLID));
	dc.DrawRectangle(right-4, startY-length, 9, length-5);
//[EOF]
};

void SeqGraphTab::OnRightDown(wxMouseEvent& event)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_LLSVVJOC/code.cpp]
	int eventID = dataBase->GetEventID(mouseOverEvent);
	
	wxMenu* aPopUp =  new wxMenu("");
	
	switch (eventID)
	{
		default:
			delete aPopUp;
			return;
		break;
	}
	
	wxWindow aWindow(this,-1,wxPoint(0,0),wxSize(0,0));
	aWindow.PopupMenu(aPopUp);
	delete aPopUp;
//[EOF]
};

void SeqGraphTab::DeleteEvent(wxCommandEvent& event)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_LPWVMCUN/code.cpp]
	dataBase->DeleteEvent(mouseOverEvent);
	Refresh();
//[EOF]
};

void SeqGraphTab::DrawFoundEvent(wxDC& dc,int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_OBQTPAPI/code.cpp]
	int start = dataBase->GetSourceIndex(eventNumber);
	int stop = dataBase->GetDestinationIndex(eventNumber);
	int startPixel;
	int stopPixel;
	int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
	startPixel = dataBase->GetClassMiddle(start);
	stopPixel = dataBase->GetClassMiddle(stop);
	
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("RED"),1,wxSOLID ));
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("RED"),wxSOLID));
	dc.DrawCircle(startPixel, yPixel, 6);
	
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
	DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADVEE, "");
//[EOF]
};

void SeqGraphTab::DrawEvent(wxDC& dc,int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_OCDVBNCC/code.cpp]
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("SEA GREEN"),1,wxSOLID));
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("WHITE"),wxSOLID));
	
	//Uncomment for debugging
	//dc.DrawLine(0,dataBase->GetTime2Y(eventNumber),dataBase->GetGraphWidth(),dataBase->GetTime2Y(eventNumber));
	
	if ((dataBase->GetEventID(eventNumber)== ID_RETURN) ||
		(dataBase->GetEventID(eventNumber)==ID_GLOBALRETURN) ||
		(dataBase->GetEventID(eventNumber)==ID_SELFRETURN)
		)
		if (thickness[dataBase->GetDestinationIndex(eventNumber)] > 0)
			--thickness[dataBase->GetDestinationIndex(eventNumber)];
	
	if (dataBase->GetEventID(eventNumber)==ID_EXIST)
	{
		if (thickness[dataBase->GetDestinationIndex(eventNumber)] < 0)
			thickness[dataBase->GetDestinationIndex(eventNumber)] = 0;
	}
	
	for (int i=0; i<dataBase->GetClassCount(); i++)
		DrawLifeLine(dc,i,eventNumber,thickness[i]);
	
	switch (dataBase->GetEventID(eventNumber))
	{
		case ID_COMMENT:
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("PURPLE"),1,wxLONG_DASH ));
			dc.DrawLine(0,dataBase->GetTime2Y(eventNumber)-14,dataBase->GetGraphWidth(),dataBase->GetTime2Y(eventNumber)-14);
			dc.DrawText(dataBase->GetLabel(eventNumber),14,dataBase->GetTime2Y(eventNumber)-14);
		break;
	
		case ID_SEND:
		case ID_SELFSEND:
		{
			int stop = dataBase->GetDestinationIndex(eventNumber);
			if (thickness[stop] < 0)
				thickness[stop] = 0;
			eventQueue[dataBase->GetDestinationIndex(eventNumber)].push_back(eventNumber);
		}
		break;
	
		case ID_STATECHANGE:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int yPixel = dataBase->GetTime2Y(eventNumber)-6;
			int xPixel = dataBase->GetClassMiddle(start);
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("YELLOW"),wxSOLID));
			dc.DrawRoundedRectangle(xPixel-42, yPixel-12, 84, 18, 3);
	
			wxString name = dataBase->GetLabel(eventNumber);
			wxCoord w,h;
			dc.GetTextExtent(name, &w, &h);
			dc.DrawText( name, xPixel-(w/2), yPixel-(h/2)-3 );
		}
		break;
	
		case ID_GLOBALCALL:
		{
			int stop = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int stopPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
			if (thickness[stop] < 0)
				thickness[stop] = 0;
	
			DrawStartExecution(dc,stop,yPixel);
			++thickness[stop];
	
			startPixel = 0;
			stopPixel = GetLeftSide(stop);
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
			DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADSOLID, dataBase->GetLabel(eventNumber));
		}
		break;
	
		case ID_CALL:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int stop = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int stopPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
			if (thickness[stop] < 0)
				thickness[stop] = 0;
	
			DrawStartExecution(dc,stop,yPixel);
			++thickness[stop];
	
			if (start>stop)
			{
				startPixel = GetLeftSide(start);
				stopPixel = GetRightSide(stop);
			}
			else
			{
				startPixel = GetRightSide(start);
				stopPixel = GetLeftSide(stop);
			}
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
			DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADSOLID, dataBase->GetLabel(eventNumber));
		}
		break;
	
		case ID_RECEIVE:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int stop = dataBase->GetDestinationIndex(eventNumber);
	
			if (thickness[stop] < 0)
				thickness[stop] = 0;
	
			if ((!eventQueue[stop].empty()) &&
				(dataBase->GetSourceIndex(eventQueue[stop].front()) == start) &&
				(dataBase->GetLabel(eventQueue[stop].front()) == dataBase->GetLabel(eventNumber))
				)
			{
				int startYPixel = dataBase->GetTime2Y(eventQueue[stop].front())-3;
				eventQueue[stop].pop_front();
	
				int startPixel = dataBase->GetClassMiddle(start);
				int stopPixel = dataBase->GetClassMiddle(stop);
				int stopYPixel = dataBase->GetTime2Y(eventNumber)-3;
	
				dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
				dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
				DrawArrow(dc, startPixel, startYPixel, stopPixel, stopYPixel, ARROWHEADVEE, dataBase->GetLabel(eventNumber));
			}
			else
				DrawFoundEvent(dc,eventNumber);
		}
		break;
	
		case ID_SELFRECEIVE:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int stop = dataBase->GetDestinationIndex(eventNumber);
	
			if (thickness[stop] < 0)
				thickness[stop] = 0;
	
			if ((!eventQueue[stop].empty()) &&
				(dataBase->GetSourceIndex(eventQueue[stop].front()) == start) &&
				(dataBase->GetLabel(eventQueue[stop].front()) == dataBase->GetLabel(eventNumber))
				)
			{
				int startYPixel = dataBase->GetTime2Y(eventQueue[stop].front())-3;
				eventQueue[stop].pop_front();
	
				int startPixel = dataBase->GetClassMiddle(start);
				int stopPixel = dataBase->GetClassMiddle(stop);
				int stopYPixel = dataBase->GetTime2Y(eventNumber)-3;
				int midYPixel = startYPixel + ((stopYPixel - startYPixel)/2);
	
				dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
				dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
				DrawArrow(dc, startPixel, startYPixel, stopPixel+50, midYPixel, ARROWHEADNONE, dataBase->GetLabel(eventNumber));
				DrawArrow(dc, startPixel+50, midYPixel, stopPixel, stopYPixel, ARROWHEADVEE, wxEmptyString);
			}
			else
				DrawFoundEvent(dc,eventNumber);
		}
		break;
	
		case ID_SELFCALL:
		{
			int stop = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int stopPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-12;
	
			if (thickness[stop] < 0)
				thickness[stop] = 0;
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
	
			startPixel = dataBase->GetClassMiddle(dataBase->GetSourceIndex(eventNumber)) + 50;
			stopPixel = GetRightSide(stop);
			DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADNONE, dataBase->GetLabel(eventNumber));
	
			yPixel += 7;
			DrawStartExecution(dc,stop,yPixel);
			++thickness[stop];
	
			startPixel = dataBase->GetClassMiddle(dataBase->GetSourceIndex(eventNumber)) + 50;
			stopPixel = GetRightSide(stop);
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
			dc.DrawLine(startPixel,yPixel-7,startPixel,yPixel);
			DrawArrow(dc, startPixel, yPixel, stopPixel, yPixel, ARROWHEADSOLID, wxEmptyString);
		}
		break;
	
		case ID_GLOBALRETURN:
		{
			int start = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int stopPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
			++thickness[start];
			startPixel = GetLeftSide(start);
			stopPixel = 0;
			--thickness[start];
	
			DrawEndExecution(dc,start,eventNumber);
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSHORT_DASH ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
			DrawArrow(dc,startPixel,
						yPixel, stopPixel, yPixel,ARROWHEADVEE,dataBase->GetLabel(eventNumber));
		}
		break;
	
		case ID_RETURN:
		{
			int start = dataBase->GetDestinationIndex(eventNumber);
			int stop = dataBase->GetSourceIndex(eventNumber);
			int startPixel;
			int stopPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-5;
	
			++thickness[start];
			if (start>stop)
			{
				startPixel = GetLeftSide(start);
				stopPixel = GetRightSide(stop);
			}
			else
			{
				startPixel = GetRightSide(start);
				stopPixel = GetLeftSide(stop);
			}
			--thickness[start];
	
			DrawEndExecution(dc,start,eventNumber);
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("BLUE"),1,wxSHORT_DASH ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("BLUE"),wxSOLID));
			DrawArrow(dc,startPixel,
						yPixel, stopPixel, yPixel,ARROWHEADVEE,dataBase->GetLabel(eventNumber));
		}
		break;
	
		case ID_SELFRETURN:
		{
			int start = dataBase->GetDestinationIndex(eventNumber);
			DrawEndExecution(dc,start,eventNumber);
		}
		break;
	
		case ID_EXIST:
		case ID_CLASSBOX:
			DrawClassBox(dc,eventNumber,dataBase->GetDestinationIndex(eventNumber));
		break;
	
		case ID_CREATE:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int stop = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-(dataBase->GetClassBoxHight()/2);
	
			if (start>stop)
				startPixel = GetLeftSide(start);
			else
				startPixel = GetRightSide(start);
	
			int offset = dataBase->GetClassBoxWidth(dataBase->GetDestinationIndex(eventNumber))/2;
			if (dataBase->GetSourceIndex(eventNumber) < dataBase->GetDestinationIndex(eventNumber))
				offset *= -1;
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("FOREST GREEN"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("FOREST GREEN"),wxSOLID));
			DrawArrow(dc,startPixel,
						yPixel,
						dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber))+offset,
						yPixel,ARROWHEADSOLID,"create()");
			thickness[dataBase->GetDestinationIndex(eventNumber)] = 0;
		}
		break;
	
		case ID_GLOBALCREATE:
		{
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("FOREST GREEN"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("FOREST GREEN"),wxSOLID));
			int yPixel = dataBase->GetTime2Y(eventNumber)-(dataBase->GetClassBoxHight()/2);
			DrawArrow(dc,0,
						yPixel,
						dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber))-(dataBase->GetClassBoxWidth(dataBase->GetDestinationIndex(eventNumber))/2),
						yPixel,ARROWHEADSOLID,"create()");
			thickness[dataBase->GetDestinationIndex(eventNumber)] = 0;
		}
		break;
	
		case ID_DELETE:
		{
			int start = dataBase->GetSourceIndex(eventNumber);
			int stop = dataBase->GetDestinationIndex(eventNumber);
			int startPixel;
			int yPixel = dataBase->GetTime2Y(eventNumber)-9;
	
			if (start>stop)
				startPixel = GetLeftSide(start);
			else
				startPixel = GetRightSide(start);
	
			DrawCross(dc,dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber)),yPixel,"SEA GREEN");
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("RED"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("RED"),wxSOLID));
			DrawArrow(dc,startPixel,
						yPixel,
						dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber)),
						yPixel,ARROWHEADSOLID,"delete()");
			thickness[dataBase->GetDestinationIndex(eventNumber)] = -1;
		}
		break;
	
		case ID_GLOBALDELETE:
		{
			int yPixel = dataBase->GetTime2Y(eventNumber)-9;
			DrawCross(dc,dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber)),yPixel,"SEA GREEN");
	
			dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("RED"),1,wxSOLID ));
			dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("RED"),wxSOLID));
			DrawArrow(dc,0,
						yPixel,
						dataBase->GetClassMiddle(dataBase->GetDestinationIndex(eventNumber)),
						yPixel,ARROWHEADSOLID,"delete()");
			thickness[dataBase->GetDestinationIndex(eventNumber)] = -1;
		}
		break;
	
	}
//[EOF]
};

void SeqGraphTab::DrawCross(wxDC& dc,int x,int y,const wxString& color)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_THEVBWCN/code.cpp]
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find(color),2,wxSOLID ));
	
	dc.DrawLine(x+8, y+8, x-8, y-8);
	dc.DrawLine(x+8, y-8, x-8, y+8);
//[EOF]
};

int SeqGraphTab::GetLeftSide(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_VSWXCCCM/code.cpp]
	int t = thickness[classIndex];
	if (t>4)
		t=4;
	
	if (t<=0)
		t=0;
	
	int table[8] = {0,-5,0,5,10,15,20,25};
	return dataBase->GetClassMiddle(classIndex)+table[t];
//[EOF]
};

void SeqGraphTab::DrawStartExecution(wxDC& dc,int classIndex,int startY)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_YNWYAVLK/code.cpp]
	int theThickness = thickness[classIndex];
	
	if (theThickness < 0)
		return;
	
	if (theThickness > 3)
		return;
	
	int right = GetRightSide(classIndex);
	
	dc.SetBrush(*wxTheBrushList->FindOrCreateBrush(wxTheColourDatabase->Find("WHITE"),wxSOLID));
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("SEA GREEN"),1,wxSOLID));
	dc.DrawRectangle(right-5, startY, 11, 8);
//[EOF]
};

void SeqGraphTab::DrawClassBox(wxDC& dc,int eventNumber,int objectNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_ZJEHAUCV/code.cpp]
	dc.SetPen(*wxThePenList->FindOrCreatePen(wxTheColourDatabase->Find("SEA GREEN"),1,wxSOLID));
	
	wxString name = dataBase->GetClassName(objectNumber);
	
	wxCoord w,h;
	dc.GetTextExtent(name, &w, &h);
	int width = dataBase->GetClassBoxWidth(objectNumber);
	
	dc.DrawRectangle(dataBase->GetClassMiddle(objectNumber)-width/2,
					dataBase->GetTime2Y(eventNumber)-dataBase->GetClassBoxHight(),
					width,
					dataBase->GetClassBoxHight());
	
	dc.DrawText( name, dataBase->GetClassMiddle(objectNumber)-(w/2), dataBase->GetTime2Y(eventNumber)-(h/2)-(dataBase->GetClassBoxHight()/2) );
//[EOF]
};

void SeqGraphTab::LeaveWindow(wxMouseEvent& event)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_GQADNYHS/operations/operation_ZWHWBUQT/code.cpp]
	theStatusBar->PushStatusText(wxEmptyString,0);
	theStatusBar->PushStatusText(wxEmptyString,1);
//[EOF]
};


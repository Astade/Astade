//******************************************************
//** Code generated by the Astade CppGenerator
//** Date:     2006-03-03 12:29:20 UTC
//** Filename: SeqDataBase.cpp
//******************************************************

#include "SeqDataBase.h"	 // own header


SeqDataBase::SeqDataBase() :
	UPPER_BORDER(30),
	longestObjectName(0),
	longestTimeStamp(0)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/constructor_SFXDKBBW/code.cpp]
	classWidth.reserve(MAXCLASSCOUNT);
	classCenter.reserve(MAXCLASSCOUNT);
	
	eventQueue.clear();
	eventQueue.reserve(MAXCLASSCOUNT);
	
	int i;
	
	for (i=0; i < MAXCLASSCOUNT; i++)
	{
		std::list<int> e;
		eventQueue.push_back(e);
	}
	
	for (i=0; i < MAXCLASSCOUNT; ++i)
		classWidth[i] = 90;
//[EOF]
};

int SeqDataBase::GetClassMiddle(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_CKJNWEUO/code.cpp]
	//return (100 * classIndex + (100/2)) + GetLeftBorder();
	return classCenter[classIndex];
//[EOF]
};

int SeqDataBase::GetGraphWidth()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_CNIEBJUX/code.cpp]
	int count = GetLeftBorder() + GetRightBorder();
	
	for (int i=0; i<GetClassCount(); i++)
		count += GetClassWidth(i);
	
	return count;
//[EOF]
};

int SeqDataBase::GetClassBoxWidth(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_EMZGPTCK/code.cpp]
	return classWidth[classIndex];
//[EOF]
};

wxString SeqDataBase::GetClassName(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_EWNCLFCZ/code.cpp]
	return classes[classIndex];
//[EOF]
};

int SeqDataBase::GetUpperBorder()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_FHEQROKP/code.cpp]
	return 30;
//[EOF]
};

int SeqDataBase::GetTimeFromY(int y)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_FPIKJXQW/code.cpp]
	unsigned int i = 0;
	for (i=0; i<itsEvents.size(); i++)
	{
		if (itsEvents[i].time > y)
			break;
	}
	return i;
//[EOF]
};

wxString SeqDataBase::GetEventTimestamp(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_FWKNJAIR/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return wxEmptyString;
	
	return itsEvents[eventNumber].aTimeStamp;
//[EOF]
};

int SeqDataBase::GetSourceIndex(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_IIAZESLH/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return 0;
	return itsEvents[eventNumber].sourceObject;
//[EOF]
};

int SeqDataBase::GetClassWidth(int classIndex)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_JVKSDNKL/code.cpp]
	return GetClassBoxWidth(classIndex) + 20;
//[EOF]
};

int SeqDataBase::GetObjectIDFromX(int x)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_KDPIFJHQ/code.cpp]
	int index = 0;
	int distance = 999999;
	for (int i = 0; i < GetClassCount(); ++i)
	{
		int thisDistance = abs(GetClassMiddle(i)-x);
		if (thisDistance < distance)
		{
			distance = thisDistance;
			index = i;
		}
	}
	
	return index;
//[EOF]
};

wxString SeqDataBase::GetLabel(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_KSAIJFGN/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return wxEmptyString;
	return itsEvents[eventNumber].label;
//[EOF]
};

void SeqDataBase::SetClassBoxWidth(int classIndex,int width)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_KTKNWQED/code.cpp]
	classWidth[classIndex] = width;
	
	for (int i=0; i < GetClassCount(); ++i)
	{
		int pos = GetLeftBorder();
		for (int j=0; j < i; ++j)
			pos += classWidth[j]+20;
		classCenter[i] = pos + classWidth[i]/2 + 10;
	}
//[EOF]
};

int SeqDataBase::GetClassBoxHight()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_LPFFAOVK/code.cpp]
	return 36;
//[EOF]
};

int SeqDataBase::GetLowerBorder()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_MIWIUDRI/code.cpp]
	return 20;
//[EOF]
};

void SeqDataBase::DeleteEvent(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_OBTOHDWD/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return;
	
	for (unsigned i = eventNumber; i < itsEvents.size()-1; ++i)
		itsEvents[i] = itsEvents[i+1];
	itsEvents.pop_back();
//[EOF]
};

int SeqDataBase::GetTime2Y(int time)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_OUXBQINT/code.cpp]
	if ((time>0) && (static_cast<unsigned int>(time) < itsEvents.size()))
		return 	itsEvents[time].time;
	else
		return 0;
//[EOF]
};

void SeqDataBase::Clear()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_PQXLMYOT/code.cpp]
	itsEvents.clear();
	
	itsEvents.push_back(SeqEvent(wxNOT_FOUND,wxNOT_FOUND,ID_NOP,wxEmptyString,wxEmptyString));
	itsEvents.push_back(SeqEvent(wxNOT_FOUND,wxNOT_FOUND,ID_NOP,wxEmptyString,wxEmptyString));
	itsEvents.back().time = GetUpperBorder();
	
	classes.Clear();
	eventQueue.clear();
	eventQueue.reserve(MAXCLASSCOUNT);
	for (int i=0; i < MAXCLASSCOUNT; i++)
	{
		std::list<int> e;
		eventQueue.push_back(e);
	}
	
	longestTimeStamp = 0;
//[EOF]
};

int SeqDataBase::GetClassCount()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_RGHEBCVV/code.cpp]
	return classes.GetCount();
//[EOF]
};

int SeqDataBase::GetLeftBorder()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_SGHOORHU/code.cpp]
	return 60;
//[EOF]
};

void SeqDataBase::AddLine(wxString theLine)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_UJEFXYRB/code.cpp]
	theLine.Trim(true).Trim(false);
	
	if (theLine.empty())
		return;
	
	if (theLine.GetChar(0)=='#')
	{
		theLine.Remove(0,1);
		theLine.Trim(false);
		AddEventComment(theLine);
		return;
	}
	
	int a,b;
	
	wxString timestamp;
	a = theLine.Find('[');
	b = theLine.Find(']',true);
	
	if ((a>0) && (b>0) && (a<b))
	{
		timestamp = theLine.Mid(a,b-a+1);
		theLine.Remove(a,timestamp.size());
	}
	
	
	wxStringTokenizer aStringTokenizer(theLine);
	
	wxString firstToken = aStringTokenizer.GetNextToken();
	
	if (firstToken.IsNumber())
		firstToken = aStringTokenizer.GetNextToken();
	
	wxString secondToken = aStringTokenizer.GetNextToken();
	
	if (firstToken=="!")
	{
		AddEventExist(AddObject(secondToken));
	}
	else
	if (secondToken==">>>")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID = EnsureObject(firstToken);
		AddEventStateChange(ID,thirdToken,timestamp);
	}
	else
	if (secondToken=="-->")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID;
		int ID2 = EnsureObject(thirdToken);
	
		if ((firstToken!="*") && (firstToken!="???"))
			ID = EnsureObject(firstToken);
		else
			ID = eventQueue[ID2].front();
	
		if ((ID2 >= 0) && (ID2 < MAXCLASSCOUNT) && (!eventQueue[ID2].empty()))
			eventQueue[ID2].pop_front();
	
		AddEventReceive(ID,ID2,aStringTokenizer.GetString(),timestamp);
	}
	else
	if (secondToken==">->")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID1 = EnsureObject(firstToken);
		int ID2 = EnsureObject(thirdToken);
		AddEventSend(ID1,ID2,aStringTokenizer.GetString(),timestamp);
		AddEventReceive(ID1,ID2,aStringTokenizer.GetString(),timestamp);
	}
	else
	if (secondToken==">--")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID1 = EnsureObject(firstToken);
		int ID2 = EnsureObject(thirdToken);
		if ((ID2 >= 0) && (ID2 < MAXCLASSCOUNT))
			eventQueue[ID2].push_back(ID1);
		AddEventSend(ID1,ID2,aStringTokenizer.GetString(),timestamp);
	}
	else
	if (secondToken=="(!)")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID = EnsureObject(firstToken);
		AddEventCreate(ID,AddObject(thirdToken),timestamp);
	}
	else
	if (secondToken=="(X)")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID = EnsureObject(firstToken);
		AddEventDelete(ID,EnsureObject(thirdToken),timestamp);
	}
	else
	if (secondToken=="==>")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID = EnsureObject(firstToken);
		AddEventCall(ID,EnsureObject(thirdToken),aStringTokenizer.GetString(),timestamp);
	}
	else
	if (secondToken=="<==")
	{
		wxString thirdToken = aStringTokenizer.GetNextToken();
		int ID = EnsureObject(firstToken);
		AddEventReturn(ID,EnsureObject(thirdToken),aStringTokenizer.GetString(),timestamp);
	}
//[EOF]
};

int SeqDataBase::GetEventsCount()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_WAZHVWRY/code.cpp]
	return itsEvents.size();
//[EOF]
};

int SeqDataBase::GetDestinationIndex(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_WDSKPUDK/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return 0;
	return itsEvents[eventNumber].destinationObject;
//[EOF]
};

int SeqDataBase::GetGraphHight()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_WDXDBAKS/code.cpp]
	if (itsEvents.empty())
		return GetLowerBorder();
	else
		return itsEvents.back().time + GetLowerBorder();
//[EOF]
};

int SeqDataBase::GetEventID(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_XECOXMRR/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return 0;
	
	return itsEvents[eventNumber].eventID;
//[EOF]
};

int SeqDataBase::GetRightBorder()
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_XUXNXPXU/code.cpp]
	return 20;
//[EOF]
};

wxString SeqDataBase::GetEventText(int eventNumber)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_YFMOBFMV/code.cpp]
	if ((eventNumber < 0) ||
		(static_cast<unsigned>(eventNumber) >= itsEvents.size()))
		return wxEmptyString;
	
	char formate[50];
	sprintf(formate,"%%04d %%%ds %%%ds   %%s   %%-%ds   %%s\n",longestTimeStamp,longestObjectName,longestObjectName);
	
	wxString ret;
	
	switch (itsEvents[eventNumber].eventID)
	{
		case ID_EXIST:
			ret.Printf("! %s\n",classes[itsEvents[eventNumber].destinationObject].c_str());
		break;
	
		case ID_STATECHANGE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),">>>",itsEvents[eventNumber].label.c_str(),"");
		break;
	
		case ID_GLOBALCALL:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),"*","==>",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_CALL:
		case ID_SELFCALL:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),"==>",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_RECEIVE:
		case ID_SELFRECEIVE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),"-->",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_SEND:
		case ID_SELFSEND:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),">--",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_COMMENT:
			ret.Printf("# %s\n",itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_GLOBALRETURN:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),"*","<==",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_RETURN:
		case ID_SELFRETURN:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),"<==",classes[itsEvents[eventNumber].destinationObject].c_str(),itsEvents[eventNumber].label.c_str());
		break;
	
		case ID_CREATE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),"(!)",classes[itsEvents[eventNumber].destinationObject].c_str(),"");
		break;
	
		case ID_GLOBALCREATE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),"*","(!)",classes[itsEvents[eventNumber].destinationObject].c_str(),"");
		break;
	
		case ID_DELETE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),classes[itsEvents[eventNumber].sourceObject].c_str(),"(X)",classes[itsEvents[eventNumber].destinationObject].c_str(),"");
		break;
	
		case ID_GLOBALDELETE:
			ret.Printf(formate,eventNumber,itsEvents[eventNumber].aTimeStamp.c_str(),"*","(X)",classes[itsEvents[eventNumber].destinationObject].c_str(),"");
		break;
	
		case ID_CLASSBOX:
		case ID_NOP:
		break;
	
		default:
			ret = "<UNKNOWN>\n";
		break;
	}
	
	return ret;
//[EOF]
};

void SeqDataBase::AddEventCall(int object1,int object2,const wxString& label,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_AVBOPYAG/code.cpp]
	if (object2 == wxNOT_FOUND)
		return;
	
	wxString s = label;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1 == wxNOT_FOUND)
	{
		itsEvents.push_back(SeqEvent(wxNOT_FOUND,object2,ID_GLOBALCALL,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 17;
	}
	else
	if (object1==object2)
	{
		itsEvents.push_back(SeqEvent(object1,object2,ID_SELFCALL,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 25;
	}
	else
	{
		itsEvents.push_back(SeqEvent(object1,object2,ID_CALL,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 17;
	}
//[EOF]
};

int SeqDataBase::AddObject(const wxString& object)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_DSUYNQXK/code.cpp]
	if ((object.empty()) || (object=="*"))
		return wxNOT_FOUND;
	
	int index = classes.Index(object);
	
	if ((index==wxNOT_FOUND) && (classes.GetCount()<MAXCLASSCOUNT))
	{
		classes.Add(object);
		if (object.size()>longestObjectName)
			longestObjectName = object.size();
		index = classes.Index(object);
	}
	
	return index;
//[EOF]
};

void SeqDataBase::AddEventSend(int object1,int object2,const wxString& label,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_HOAEOUUT/code.cpp]
	if ((object2 == wxNOT_FOUND) || (object1 == wxNOT_FOUND))
		return;
	
	wxString s = label;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1==object2)
		itsEvents.push_back(SeqEvent(object1,object2,ID_SELFSEND,s.Trim(true).Trim(false),timeStamp));
	else
		itsEvents.push_back(SeqEvent(object1,object2,ID_SEND,s.Trim(true).Trim(false),timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 13;
//[EOF]
};

void SeqDataBase::AddEventReceive(int object1,int object2,const wxString& label,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_JPHUINJF/code.cpp]
	if ((object2 == wxNOT_FOUND) || (object1 == wxNOT_FOUND))
		return;
	
	wxString s = label;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1==object2)
		itsEvents.push_back(SeqEvent(object1,object2,ID_SELFRECEIVE,s.Trim(true).Trim(false),timeStamp));
	else
		itsEvents.push_back(SeqEvent(object1,object2,ID_RECEIVE,s.Trim(true).Trim(false),timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 10;
//[EOF]
};

void SeqDataBase::AddEventReturn(int object1,int object2,const wxString& label,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_MBCPKFOA/code.cpp]
	if (object2 == wxNOT_FOUND)
		return;
	
	wxString s = label;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1 == wxNOT_FOUND)
	{
		itsEvents.push_back(SeqEvent(wxNOT_FOUND,object2,ID_GLOBALRETURN,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 17;
	}
	else
	if (object1 == object2)
	{
		itsEvents.push_back(SeqEvent(object1,object2,ID_SELFRETURN,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 8;
	}
	else
	{
		itsEvents.push_back(SeqEvent(object1,object2,ID_RETURN,s.Trim(true).Trim(false),timeStamp));
		itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 17;
	}
//[EOF]
};

void SeqDataBase::AddEventCreate(int object1,int object2,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_NPRHEDPA/code.cpp]
	if (object2 == wxNOT_FOUND)
		return;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1 == wxNOT_FOUND)
		itsEvents.push_back(SeqEvent(wxNOT_FOUND,object2,ID_GLOBALCREATE,wxEmptyString,timeStamp));
	else
		itsEvents.push_back(SeqEvent(object1,object2,ID_CREATE,wxEmptyString,timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + GetClassBoxHight();
	
	itsEvents.push_back(SeqEvent(0,object2,ID_CLASSBOX,wxEmptyString,timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time;
//[EOF]
};

int SeqDataBase::EnsureObject(const wxString& object)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_NXGHDTYR/code.cpp]
	if ((object.empty()) || (object=="*"))
		return wxNOT_FOUND;
	
	int index = classes.Index(object);
	
	if ((index==wxNOT_FOUND) && (classes.GetCount()<MAXCLASSCOUNT))
	{
		index = AddObject(object);
		AddEventExist(index);
	}
	
	return index;
//[EOF]
};

void SeqDataBase::AddEventStateChange(int object1,const wxString& label,const wxString& timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_UHECKPGA/code.cpp]
	if (object1 == wxNOT_FOUND)
		return;
	
	wxString s = label;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	itsEvents.push_back(SeqEvent(object1,wxNOT_FOUND,ID_STATECHANGE,s.Trim(true).Trim(false),timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 19;
//[EOF]
};

void SeqDataBase::AddEventComment(const wxString& string)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_UXWLASSB/code.cpp]
	itsEvents.push_back(SeqEvent(0,0,ID_COMMENT,string,wxEmptyString));
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 17;
//[EOF]
};

void SeqDataBase::AddEventExist(int object1)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_XSQKCOZJ/code.cpp]
	if (object1 == wxNOT_FOUND)
		return;
	
	itsEvents.push_back(SeqEvent(wxNOT_FOUND,object1,ID_EXIST,wxEmptyString,wxEmptyString));
	
	int possibleHight = GetClassBoxHight();
	int test = itsEvents.size()-2;
	
	while (	(possibleHight > 0) &&
			(test > 0) &&
			(itsEvents[test].eventID != ID_NOP) &&
			(itsEvents[test].eventID != ID_COMMENT)
		  )
	{
		possibleHight -= (itsEvents[test].time - itsEvents[test-1].time);
		--test;
	}
	
	if (possibleHight < 0)
		possibleHight = 0;
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + possibleHight;
//[EOF]
};

void SeqDataBase::AddEventDelete(int object1,int object2,wxString timeStamp)
{
//[/Users/stefan/Developer/Astade-UML/trace2uml/Model/Package_LEOIFVGO/classes/class_ISQIUIGR/operations/operation_ZASWAKXE/code.cpp]
	if (object2 == wxNOT_FOUND)
		return;
	
	if (timeStamp.size() > longestTimeStamp)
		longestTimeStamp = timeStamp.size();
	
	if (object1 == wxNOT_FOUND)
		itsEvents.push_back(SeqEvent(wxNOT_FOUND,object2,ID_GLOBALDELETE,wxEmptyString,timeStamp));
	else
		itsEvents.push_back(SeqEvent(object1,object2,ID_DELETE,wxEmptyString,timeStamp));
	
	itsEvents.back().time = itsEvents[itsEvents.size()-2].time + 21;
//[EOF]
};


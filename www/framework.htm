<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Astade runtime framework</title>
</head>

<body>

<p><!--webbot bot="Navigation" S-Type="siblings" S-Orientation="horizontal"
S-Rendering="graphics" B-Include-Home="FALSE" B-Include-Up="FALSE" U-Page
S-Target startspan --><nobr>[&nbsp;framework&nbsp;]</nobr> <nobr>[&nbsp;<a href="softwarearchitecture.htm">architecture</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="screenshots.htm">screenshots</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="contribution.htm">contribution</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="resources.htm">resources</a>&nbsp;]</nobr> <nobr>[&nbsp;<a href="download.htm">download</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="28679" --></p>
<h1>The Astade runtime framework</h1>
<p>The framework in Astade is made to synchronize processing and to distribute
messages inside one process. Actually the UML state machines need that
framework. The design guidelines for the framework, or the use cases, if you
like, are the following:</p>
<h2>The design criteria for the first step:</h2>
<ol>
  <li>There can be multiple state machines running independent, even if there is
    no multithreading.</li>
  <li>If there is multithreading, there are groups of machines running in one
    thread and other groups running in other threads. Messages can be passed
    between these groups.</li>
  <li>A &quot;message&quot; is any object, which inherits from the Astade
    message base class.</li>
  <li>There is a mechanism to trigger messages from hardware events like
    interrupts and signals.</li>
  <li>There is a timer mechanism for timeouts in the different states. The timer
    unit is milliseconds.</li>
  <li>State charts can be inherited, even partially.</li>
  <li>For performance reasons, it is possible, to send messages, which are
    static declared somewhere. This saves time in allocating and freeing memory.</li>
  <li>For convenience it is <u>also</u> possible to send messages, which are
    allocated at the heap. The framework takes care, that they are properly
    freed again.</li>
  <li>There are save mechanisms to create and destroy objects, which contain
    state charts. Messages will not arrive at destroyed objects (which would
    crash the program, actually).</li>
  <li>The addressing mechanism, between the Objects, are pointers (for
    performance reasons).&nbsp;</li>
</ol>
<p>The framework is designed in a way, that the following things can be added
later. They will not be implemented in the first step:</p>
<h2>Keep in mind, for further extension:</h2>
<ol>
  <li>States can contain sub states. There can be concurrent states.</li>
  <li>The addressing with &quot;logical&quot; object names instead of pointers.</li>
  <li>Message passing between components or even nodes.</li>
</ol>
<h2>Coding example:</h2>
<p>To understand, what the automatic coder of Astade can do for you, here a
(very) simple example. Imagine, you want to implement an automatic staircase
light. If someone presses the button, light switches on. After a while (30
seconds), it switches off again automatically. If somebody presses again, while
light is on, the timeout is extended.</p>
<p>Here is the state chart for that:</p>
<p><img border="0" src="images/sc.png" width="256" height="191"></p>
<p>If a class would have such a state chart, Astade would code the following
additional operations into that class:</p>
<table border="0">
  <tr>
    <td bgcolor="#C0C0C0">
<p><font face="Courier"><font color="#0000FF">bool</font> AdeState_On<font color="#FF0000">(</font>AdeEvent<font color="#FF0000">&amp;</font>
theEvent<font color="#FF0000">)</font><br>
<font color="#FF0000">
{</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> (<font color="#0000FF">typeid</font><font color="#FF0000">(</font>theEvent<font color="#FF0000">)==</font><font color="#0000FF">typeid</font><font color="#FF0000">(</font>EvPressButton<font color="#FF0000">))</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">{</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">//do nothing</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetState<font color="#FF0000">(</font>AdeState_On<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; SetTimer<font color="#FF0000">(</font>30000<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">}</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> <font color="#FF0000">(</font><font color="#0000FF">typeid</font><font color="#FF0000">(</font>theEvent<font color="#FF0000">)==</font><font color="#0000FF">typeid</font><font color="#FF0000">(</font>EvAdeTimer<font color="#FF0000">))</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">{</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DoLightOff<font color="#FF0000">(</font>theEvent<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetState<font color="#FF0000">(</font>AdeState_Off<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetTimer<font color="#FF0000">(</font>0<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">}</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">{</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return false</font><font color="#FF0000">;</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">}</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return true</font><font color="#FF0000">;</font><br>
<font color="#FF0000">
}</font></font></p>
    </td>
  </tr>
</table>
<table border="0">
  <tr>
    <td bgcolor="#C0C0C0">
<p><font face="Courier"><font color="#0000FF">bool</font> AdeState_Off<font color="#FF0000">(</font>AdeEvent<font color="#FF0000">&amp;</font>
theEvent<font color="#FF0000">)</font><br>
<font color="#FF0000">
{</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> (<font color="#0000FF">typeid</font><font color="#FF0000">(</font>theEvent<font color="#FF0000">)==</font><font color="#0000FF">typeid</font><font color="#FF0000">(</font>EvPressButton<font color="#FF0000">))</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">{</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">//do nothing</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SetState<font color="#FF0000">(</font>AdeState_On<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; SetTimer<font color="#FF0000">(</font>30000<font color="#FF0000">);</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000">}</font><br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF"> else</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000"> {</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return false</font><font color="#FF0000">;</font><br>
&nbsp;&nbsp;&nbsp; <font color="#FF0000"> }</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">return true</font><font color="#FF0000">;</font><br>
<font color="#FF0000">
}</font></font></p>
    </td>
  </tr>
</table>
<p>This actually is the implementation of the state chart! Astade has to code
one operation for every state and one &quot;if&quot; statement for every transition, which
leaves the state. Of course, the class
should implement the operations &quot;DoLightOn&quot; and &quot;DoLightOff&quot;
in some way. This still must be &quot;hand coded&quot; And it must inherit from
the Astade state machine base class to get the message passing functionality.</p>
<p>The functions &quot;<font face="Courier">SetTimer</font>&quot; and &quot;<font face="Courier">SetState</font>&quot;
are implemented in AdeStateMachine (the base class for all state machines). The
return value is used to decide weather the Event has to be passed to concurrent states or sub states.</p>
<h2>The Framework:</h2>
<p>To get everything up and running, Astade has to do some message queuing and
timer management. This is done in 5 Framework classes, which you can free add to
your code:</p>
<p><img border="0" src="images/framework.png" width="548" height="367"></p>
<ul>
  <li>AdeMachineEnvironment: manages everything. takes care, that the messages
    are handled correct and the state functions of the state machines are called
    with the messages. Normally you will need one of these classes in every
    thread. Inside one AdeMachineEnvironment can run any number of state
    machines at a time.</li>
  <li>AdeOsAbstraction: contains all operating system dependent functionality of
    the framework. If you have to adapt the framework to whatever strange
    operating system, you have to adapt here (and <u>only</u> here!).</li>
  <li>AdeEventQueue: a queuing container for AdeEvents. Implemented in a dynamic
    growing way, with a minimum of &quot; malloc&quot; and &quot;free&quot;
    operations.</li>
  <li>AdeStateMachine: is a abstract class for all your individual state
    machines. Inside this class lives the (hand coded) event handlers and the
    auto coded &quot;state&quot; operations.</li>
  <li>AdeEvent: is the abstract base class for all events. Whatever inherits
    from &quot;AdeEvent&quot; can be send through the event queue to another
    state machine.</li>
</ul>
<p><!--webbot bot="Navigation" S-Type="parent" S-Orientation="horizontal"
S-Rendering="graphics" B-Include-Home="FALSE" B-Include-Up="FALSE" U-Page
S-Target startspan --><nobr>[&nbsp;<a href="index.html">Project&nbsp;overview</a>&nbsp;]</nobr><!--webbot bot="Navigation" endspan i-checksum="12898" --></p>

</body>

</html>

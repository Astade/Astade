<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
</head>

<body>

<h1 align="center"><b>Hello World Tutorial</b></h1>
<hr>
<p align="right">Author: Kyung Un Choi&nbsp;</p>
<p align="right">Co-author: Thomas Spitzer</p>
<p align="right">Astade version: 0.4.0</p>
<p align="right"><!--webbot bot="Timestamp" startspan S-Type="EDITED"
S-Format="%d.%m.%Y" -->14.01.2007<!--webbot bot="Timestamp" i-CheckSum="12479"
endspan -->
</p>
<hr>
<p><b>Astade Configuration</b></p>

<p>Before following this tutorial, you should make sure some configurations are
correct. Basically, they are plugins. Using browser to set an appropriate
application path.</p>

<p><img border="0" src="HelloW5.jpg" width="598" height="448"></p>

<p><img border="0" src="HelloW6.jpg" width="618" height="430"></p>

<p><b>Open model</b></p>
<p>Set working directory by opening model (This can be any directory that you
like). You may want to use a different directory for a different project.&nbsp;</p>
<p><img border="0" src="new_pa1.jpg" width="499" height="421"></p>
<p>Choose an appropriate directory or create one. If you have not created the
directory, you should create one prior to this step.</p>
<p><img border="0" src="new_pa2.jpg" width="326" height="322"></p>
<p><b>Add component folder&nbsp;</b></p>
<p>Move mouse on the icon and click left. (To activate most of the Astade tree
command, use left mouse click). You can have several component folders for your
application if it requires.&nbsp;&nbsp;</p>
<p><img border="0" src="new_pa3.jpg" width="499" height="421"></p>
<p>Change its property by selecting features submanue&nbsp;</p>
<p><img border="0" src="new_pa4.jpg" width="499" height="421"></p>
<p>For this tutorial, change the name as &quot;Tutorial&quot;. You can also write
a description if you want.</p>
<p><img border="0" src="new_pa5.jpg" width="500" height="400"></p>
<p><b>Add component</b></p>
<p>Add an actual component which is same as your program. The component will
have completed codes for your program. You can have several components in one
component folder for your application if it requires.</p>
<p><img border="0" src="new_pa6.jpg" width="499" height="421"></p>
<p>Change the component name by selecting features</p>
<p><img border="0" src="new_pa7.jpg" width="499" height="421"></p>
<p>Hey, this should be HelloWorld instead of HolleWorld. The name does not
really matter. I will leave it as it is since I have made all the snap shots already =)
Your executable file will be named &quot;HolleWorld.exe&quot; instead of
&quot;HelloWorld.exe&quot; though.</p>
<p><img border="0" src="new_pa8.jpg" width="500" height="400"></p>
<p><b>Add configuration</b></p>
<p>This will hold Makefile, object and executable file.&nbsp;You can also create
many configurations folder for different OS systems. These configuration will
not interfere from each other.</p>
<p><img border="0" src="new_pa9.jpg" width="499" height="421"></p>
<p>Change the name by selecting features.</p>
<p><img border="0" src="new_pa10.jpg" width="499" height="421"></p>
<p><img border="0" src="new_pa11.jpg" width="500" height="400"></p>
<p><b>Set as active component</b></p>
<p>Astade will use this active component for placing auto generated code, compiling,
etc.</p>
<p><img border="0" src="new_pa12.jpg" width="499" height="421"></p>
<p>You can identify which components is active by seeing a green dot in case you
have more than one component. We are finished with the component for now. We
will be back here though.</p>
<p><img border="0" src="new_pa13.jpg" width="499" height="421"></p>
<p><b>Add package</b></p>
<p>This will contain all the classes, included libraries,
and others which you will create for your UML model. The package is used by Astade for generating codes, generating object
model diagram and for other features. Generally speaking, you are programming
partial codes for your application in the packages. For your completed codes
which will be compiled through Astade, you will use auto-code generation
function in the component depends on your OS system at the end. The code
generation function use this package information for generationg complete codes.
You will see soon how you can program your application in the
package.&nbsp;&nbsp;</p>
<p><img border="0" src="new_pa14.jpg" width="499" height="421"></p>
<p>Change the package name by selecting features</p>
<p><img border="0" src="new_pa15.jpg" width="499" height="421"></p>
<p><img border="0" src="new_pa16.jpg" width="500" height="400"></p>
<p>Add the subpackage which is Hellow World Package for this tutorial. You can
add as many as packages you want, but you should always have at least one
package.</p>
<p><img border="0" src="new_pa17.jpg" width="499" height="421"></p>
<p><img border="0" src="new_pa18.jpg" width="499" height="421"></p>
<p><img border="0" src="new_pa19.jpg" width="500" height="400"></p>
<p><b>Add classes&nbsp;</b></p>
<p>Add classes folder which will contain a class you will create for your
application.</p>
<p><img border="0" src="new_pa20.jpg" width="499" height="421"></p>
<p>Add actual your class under the classes folder by selecting the add class
submanue.</p>
<p><img border="0" src="new_pa21.jpg" width="499" height="421"></p>
<p>Change the name of your class, CHello for this tutorial.</p>
<p><img border="0" src="new_pa22.jpg" width="499" height="421"></p>
<p>You can use &quot;Additional base classes&quot; for inheritance, but we do
not need it for this tutorial. Description will be placed in auto generated
source code. Think like this you are constructing your class by filling up the
text dialogs instead of in a text editor. Why we do that? When you have a big
project, in this way, you can save your time for developing and maintain your
codes easily and fast.&nbsp;</p>
<p><img border="0" src="new_pa23.jpg" width="500" height="400"></p>
<p><b>Add to active component&nbsp;</b></p>
<p>This will add your class into your program(component) which is HolleWorld.</p>
<p><img border="0" src="new_pa25.jpg" width="499" height="421"></p>
<p><b>Add attributes</b></p>
<p>This folder will hold attribute(s). In this tutorial, the attribute will be a
message
in the CHello class. You will see soon.</p>
<p><img border="0" src="new_pa26.jpg" width="499" height="421"></p>
<p>add a attribute of your class under attributes folder.</p>
<p><img border="0" src="new_pa27.jpg" width="499" height="421"></p>
<p>Change your attribute features(properties) of your class.</p>
<p><img border="0" src="new_pa28.jpg" width="499" height="421"></p>
<p>Message is a member variable with string type. You have to add
&quot;std::&quot; since Astade do not support &quot;using namespace std&quot;
yet. Select an access control identifier from radio buttons. Select private for
this tutorial.&nbsp;</p>
<p><img border="0" src="new_pa31.jpg" width="500" height="400"></p>
<p><img border="0" src="new_pa99.jpg" width="520" height="242"></p>
<p><b>Add operations</b></p>

<p>This folder will contain a contructor(s), a destructor and member functions.&nbsp;</p>

<p><img border="0" src="new_pa33.jpg" width="520" height="421"></p>

<p>Add a constructor and it is named CHello.</p>

<p><img border="0" src="new_pa34.jpg" width="520" height="421"></p>

<p>Add statements by using the edit function or double mouse click to call
editor under the constructor. In this case, tyep the statement that will initialize member variable
Message to &quot;Hello World&quot;.</p>

<p><img border="0" src="new_pa35.jpg" width="520" height="421"></p>
<p><img border="0" src="new_pa36.jpg" width="305" height="263"></p>
<p>Add&nbsp; the operation getMessage().&nbsp;</p>
<p><img border="0" src="new_pa37.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa38.jpg" width="586" height="418"></p>
<p>&quot;std::string&quot; is a return type of
&quot;getMessage()&quot;. Notice that it is inline function.&nbsp;</p>
<p><img border="0" src="new_pa39.jpg" width="500" height="400"></p>
<p><img border="0" src="new_pa40.jpg" width="586" height="418"></p>
<p>Add return statements for the member function.</p>
<p><img border="0" src="new_pa41.jpg" width="305" height="263"></p>
<p>After adding the operation, setMessage(), you should add parameters folder,
which holds&nbsp; &quot;std::string str&quot; for this tutorial.</p>
<p><img border="0" src="new_pa42.jpg" width="586" height="418"></p>
<p>Add a paramter in parameters folder.</p>
<p><img border="0" src="new_pa43.jpg" width="586" height="418"></p>
<p>Parameter is str. type is std::str, which is error. we will debug it later. Leave
as it is for now.</p>
<p><img border="0" src="new_pa44.jpg" width="500" height="400"></p>
<p><img border="0" src="new_pa45.jpg" width="586" height="418"></p>
<p>Add a statement for the member function.</p>
<p><img border="0" src="new_pa46.jpg" width="305" height="263"></p>
<p>Add the member function display().</p>
<p><img border="0" src="new_pa47.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa48.jpg" width="305" height="263"></p>
<p><b>Add library and create relation with the class.</b></p>
<p>Including standard libraries in CHello class, add two libraries for
&lt;iostream&gt; and &lt;string&gt;.&nbsp;</p>
<p><img border="0" src="new_pa49.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa50.jpg" width="586" height="418"></p>
<p>Change the name with something meaningful. For &quot;Class include&quot;, you should
type start with &quot;&lt;&quot; and end with &quot;&gt;&quot; in this toturial.
You use &quot;xxx.h&quot; without &quot;&lt;&gt;&quot; for user defined library.</p>
<p><img border="0" src="new_pa51.jpg" width="500" height="400"></p>
<p>Samething for string class.</p>
<p><img border="0" src="new_pa52.jpg" width="500" height="400"></p>
<p>In order to include the library right into source file, either CHello.cpp or
CHello.h,&nbsp; Astade uses &quot;start relation to&quot; from the class.&nbsp;</p>
<p><img border="0" src="new_pa53.jpg" width="586" height="418"></p>
<p>&quot;complete relation from CHello&quot; in the library you want to include.</p>
<p><img border="0" src="new_pa54.jpg" width="586" height="418"></p>
<p>You check the relations icon under CHello class. Change features(properties) of
the relation.</p>
<p><img border="0" src="new_pa55.jpg" width="586" height="418"></p>
<p>&lt;iostream&gt; will be include in CHello.cpp file. There are also other
options to choose depend on the relation.</p>
<p><img border="0" src="new_pa56.jpg" width="500" height="400"></p>
<p>In order to include the second library, you do the samething. You can also use &quot;start relation to...&quot;
from relations instead of CHello. Rest of steps are same above.</p>
<p><img border="0" src="new_pa57.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa58.jpg" width="586" height="418"></p>
<p>Choose &quot;SpecificationDependency&quot;. The icon also indicates to which
file you include the library.&nbsp;</p>
<p><img border="0" src="new_pa59.jpg" width="500" height="400"></p>
<p>You will get something like this after create relations.&nbsp;</p>
<p><img border="0" src="new_pa63.jpg" width="586" height="418"></p>
<p><b>Generating code</b></p>
<p>Now you done creating basic model. Astade will create codes based on the
information you have provided. Select &quot;generate code&quot;.</p>
<p><img border="0" src="new_pa64.jpg" width="586" height="418"></p>
<p>Green dot indicates that code generation is completed.</p>
<p><img border="0" src="new_pa65.jpg" width="586" height="418"></p>
<p>There are two ways to check the auto generated codes. First one is from CHello
class. First, you can use the CHello class icon</p>
<p><img border="0" src="new_pa66.jpg" width="586" height="418">&nbsp;&nbsp;</p>
<p>Second one is from HolleWorld component by using edit or double click the
file (Do not change auto
generated code because this will be over written when regenerating codes).</p>
<p><img border="0" src="new_pa67.jpg" width="586" height="418"></p>
<p>Both two ways show the auto generated code.</p>
<p><img border="0" src="new_pa68.jpg" width="781" height="672"></p>
<p>Checking CHello.h file.</p>
<p><img border="0" src="new_pa98.jpg" width="541" height="470"></p>
<p><img border="0" src="new_pa70.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa71.jpg" width="672" height="621"></p>
<p>Copy main.cpp from pre-made main.cpp template.&nbsp;</p>
<p><img border="0" src="new_pa73.jpg" width="563" height="416"></p>
<p>Or you can create a template main.cpp by selecting &quot;Make Empty
main.cpp&quot;.</p>
<p><img border="0" src="HelloW4.jpg" width="598" height="448"></p>
<p>Start edit your main.cpp.&nbsp;</p>
<p><img border="0" src="new_pa74.jpg" width="646" height="386"></p>
<p>Copy Makefile from your Makefile template. In this tutorial, we will use
default Astade Makefile.</p>
<p><img border="0" src="new_pa75.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa76.jpg" width="563" height="416"></p>
<p><img border="0" src="new_pa77.jpg" width="586" height="418"></p>
<p>Since this HolleWorld is command line executable, we will comment out GUI
stuff. Make sure you do the same thing. Otherwise, your program will run in background and eat up your
CPU. Comment out LDFLAGS part and edit it.&nbsp;</p>
<p><img border="0" src="new_pa78.jpg" width="672" height="621"></p>
<p>We are almost there. You can build and debug your component.</p>
<p><img border="0" src="new_pa79.jpg" width="586" height="418"></p>
<p><b>Debug your component.</b></p>
<p><img border="0" src="new_pa80.jpg" width="760" height="300"></p>
<p>Type declaration is wrong. You can use right mouse click and select line
number. You can directly open the file from submanue.</p>
<p><img border="0" src="new_pa81.jpg" width="676" height="625"></p>
<p><img border="0" src="new_pa82.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa83.jpg" width="500" height="400"></p>
<p>Namespace scope is missing, &quot;......std::endl;&quot;</p>
<p><img border="0" src="new_pa84.jpg" width="676" height="625"></p>
<p><img border="0" src="new_pa85.jpg" width="586" height="418"></p>
<p>Make sure you save your change.</p>
<p><img border="0" src="new_pa86.jpg" width="676" height="625"></p>
<p>Regenerate code and check its change.</p>
<p><img border="0" src="new_pa87.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa88.jpg" width="676" height="625"></p>
<p><img border="0" src="new_pa89.jpg" width="676" height="625"></p>
<p>Rebuild and hope that it will be compiled.</p>
<p><img border="0" src="new_pa90.jpg" width="586" height="418"></p>
<p>Done. Close window.</p>
<p><img border="0" src="new_pa91.jpg" width="760" height="300"></p>
<p>Use &quot;run&quot; in order to run your Hello World application.&nbsp;</p>
<p><img border="0" src="new_pa92.jpg" width="586" height="418"></p>
<p><img border="0" src="new_pa95.jpg" width="669" height="338"></p>
<p>Let's browse window directory to find your Model.</p>
<p><img border="0" src="new_pa93.jpg" width="789" height="601"></p>
<p>Browse Component directory until you can find executable file,
&quot;HolleWorld.exe&quot;. The path should be something simular below.&nbsp;</p>
<p>C:\Documents and Settings\Administrator\Desktop\TutorialModel\Components_JOTOJPRH\Component_PLQUEDXT\Config_FCCYOSNQ</p>
<p><img border="0" src="new_pa94.jpg" width="789" height="601"></p>
<p>When you execute it, the out put should be like this.</p>
<p><img border="0" src="new_pa95.jpg" width="669" height="338"></p>
<p>Over all look.</p>
<p><img border="0" src="new_pa97.jpg" width="643" height="768"></p>
<p><b>Generating Object model diagram</b></p>
<p>Tutorial Package and select Object model diagram</p>
<p><img border="0" src="HelloW1.jpg" width="632" height="620"></p>
<p>Select &quot;all&quot; for now and let's see what happen.</p>
<p><img border="0" src="HelloW2.jpg" width="243" height="375"></p>

<p>Here is what should happen. Cool, isn't it? =)</p>

<p><img border="0" src="HelloW3.jpg" width="768" height="530"></p>

<p>You can make a document with Astade by using Doxygen application. Basically,
you can plugin it into Astade by using &quot;set directories&quot;</p>

</body>

</html>
